#include<iostream>
#include<fstream>
#include<cctype>
#include<iomanip>
using namespace std;


class account
{
	int acno;
	char name[50];
	int deposit;
	char type;
public:
	void create_account();	//function to get data from user
	void show_account() const;	//function to show data on screen
	void modify();	//function to add new data
	void dep(int);	//function to accept amount and add to balance amount
	void draw(int);	//function to accept amount and subtract from balance amount
	void report() const;	//function to show data in tabular format
	int retacno() const;	//function to return account number
	int retdeposit() const;	//function to return balance amount
	char rettype() const;	//function to return type of account
};         //class ends here

void account::create_account()
{
	cout << "\nВведите номер счёта :";
	cin >> acno;
	cout << "\n\nВведите имя владельца счета : ";
	cin.ignore();
	cin.getline(name, 50);
	cout << "\nВведите вид  учетной записи(C/S) : ";
	cin >> type;
	type = toupper(type);
	cout << "\nВведите начальную сумму(> = 50 для сохранения и > = 10 для текущей) : ";
	cin >> deposit;
	cout << "\n\n\nСчёт создан..";
}

void account::show_account() const
{
	cout << "\nНомер счёта : " << acno;
	cout << "\nИмя владельца счета : ";
	cout << name;
	cout << "\nВид  учетной записи : " << type;
	cout << "\nСумма остатка : " << deposit;
}


void account::modify()
{
	cout << "\n№ счёта : " << acno;
	cout << "\nИзменить имя владельца счета : ";
	cin.ignore();
	cin.getline(name, 50);
	cout << "\nИзменить вид учетной записи : ";
	cin >> type;
	type = toupper(type);
	cout << "\nИзменить сумму баланса : ";
	cin >> deposit;
}


void account::dep(int x)
{
	deposit += x;
}

void account::draw(int x)
{
	deposit -= x;
}

void account::report() const
{
	cout << acno << setw(10) << " " << name << setw(10) << " " << type << setw(6) << deposit << endl;
}


int account::retacno() const
{
	return acno;
}

int account::retdeposit() const
{
	return deposit;
}

char account::rettype() const
{
	return type;
}


void write_account();	//function to write record in binary file
void display_sp(int);	//function to display account details given by user
void modify_account(int);	//function to modify record of file
void delete_account(int);	//function to delete record of file
void display_all();		//function to display all account details
void deposit_withdraw(int, int); // function to desposit/withdraw amount for given account



int main()
{
	char ch;
	int num;
	do
	{
		setlocale(LC_ALL, "Russian");
		cout << "\n\n\n\tГЛАВНОЕ МЕНЮ ";
		cout << "\n\n\t01. НОВЫЙ АККАУНТ ";
		cout << "\n\n\t02. СУММА ВКЛАДА";
		cout << "\n\n\t03. СУММА СНЯТИЯ";
		cout << "\n\n\t04. ЗАПРОС БАЛАНСА";
		cout << "\n\n\t05. СПИСОК ВСЕХ СЧЕТОВ";
		cout << "\n\n\t06. ЗАКРЫТЬ СЧЕТ";
		cout << "\n\n\t07. ИЗМЕНИТЬ СЧЕТ";
		cout << "\n\n\t08. ВЫХОД";
		cout << "\n\n\t Выберите ваш вариант(1-8) ";
		cin >> ch;
		switch (ch)
		{
		case '1':
			write_account();
			break;
		case '2':
			cout << "\n\n\tВведите номер счета : "; cin >> num;
			deposit_withdraw(num, 1);
			break;
		case '3':
			cout << "\n\n\tВведите номер счета : "; cin >> num;
			deposit_withdraw(num, 2);
			break;
		case '4':
			cout << "\n\n\tВведите номер счета : "; cin >> num;
			display_sp(num);
			break;
		case '5':
			display_all();
			break;
		case '6':
			cout << "\n\n\tВведите номер счета : "; cin >> num;
			delete_account(num);
			break;
		case '7':
			cout << "\n\n\tВведите номер счета : "; cin >> num;
			modify_account(num);
			break;
		case '8':
			cout << "\n\n\tСпасибо за использование системы управления банком";
			break;
		default:cout << "\a";
		}
		cin.ignore();
		cin.get();
	} while (ch != '8');
	return 0;
}



void write_account()
{
	account ac;
	ofstream outFile;
	outFile.open("account.dat", ios::binary | ios::app);
	ac.create_account();
	outFile.write(reinterpret_cast<char*> (&ac), sizeof(account));
	outFile.close();
}


void display_sp(int n)
{
	account ac;
	bool flag = false;
	ifstream inFile;
	inFile.open("account.dat", ios::binary);
	if (!inFile)
	{
		cout << "Файл не может быть открыт!Нажмите любую кнопку...";
		return;
	}
	cout << "\nДЕТАЛИ БАЛАНСАn";

	while (inFile.read(reinterpret_cast<char*> (&ac), sizeof(account)))
	{
		if (ac.retacno() == n)
		{
			ac.show_account();
			flag = true;
		}
	}
	inFile.close();
	if (flag == false)
		cout << "\n\nНомер счета не существует";
}



void modify_account(int n)
{
	bool found = false;
	account ac;
	fstream File;
	File.open("account.dat", ios::binary | ios::in | ios::out);
	if (!File)
	{
		cout << "Файл не может быть открыт!Нажмите любую кнопку...";
		return;
	}
	while (!File.eof() && found == false)
	{
		File.read(reinterpret_cast<char*> (&ac), sizeof(account));
		if (ac.retacno() == n)
		{
			ac.show_account();
			cout << "\n\nВведите новые данные счета" << endl;
			ac.modify();
			int pos = (-1) * static_cast<int>(sizeof(account));
			File.seekp(pos, ios::cur);
			File.write(reinterpret_cast<char*> (&ac), sizeof(account));
			cout << "\n\n\t Запись обновлена";
			found = true;
		}
	}
	File.close();
	if (found == false)
		cout << "\n\nЗапись не найдена ";
}


void delete_account(int n)
{
	account ac;
	ifstream inFile;
	ofstream outFile;
	inFile.open("account.dat", ios::binary);
	if (!inFile)
	{
		cout << "Файл не может быть открыт!Нажмите любую кнопку...";
		return;
	}
	outFile.open("Temp.dat", ios::binary);
	inFile.seekg(0, ios::beg);
	while (inFile.read(reinterpret_cast<char*> (&ac), sizeof(account)))
	{
		if (ac.retacno() != n)
		{
			outFile.write(reinterpret_cast<char*> (&ac), sizeof(account));
		}
	}
	inFile.close();
	outFile.close();
	remove("account.dat");
	rename("Temp.dat", "account.dat");
	cout << "\n\n\tЗапись удалена ..";
}


void display_all()
{
	account ac;
	ifstream inFile;
	inFile.open("account.dat", ios::binary);
	if (!inFile)
	{
		cout << "Файл не может быть открыт!Нажмите любую кнопку...";
		return;
	}
	cout << "\n\n\t\tСПИСОК ДЕРЖАТЕЛЕЙ СЧЕТА\n\n";
	cout << "====================================================\n";
	cout << "№ СЧЁТА       ИМЯ          ТИП    БАЛАНС\n";
	cout << "====================================================\n";
	while (inFile.read(reinterpret_cast<char*> (&ac), sizeof(account)))
	{
		ac.report();
	}
	inFile.close();
}


void deposit_withdraw(int n, int option)
{
	int amt;
	bool found = false;
	account ac;
	fstream File;
	File.open("account.dat", ios::binary | ios::in | ios::out);
	if (!File)
	{
		cout << "Файл не может быть открыт!Нажмите любую кнопку...";
		return;
	}
	while (!File.eof() && found == false)
	{
		File.read(reinterpret_cast<char*> (&ac), sizeof(account));
		if (ac.retacno() == n)
		{
			ac.show_account();
			if (option == 1)
			{
				cout << "\n\n\tПОЛОЖИТЬ СУММУ НА СЧЁТ ";
				cout << "\n\nВведите сумму для депозита";
				cin >> amt;
				ac.dep(amt);
			}
			if (option == 2)
			{
				cout << "\n\n\tВЫВЕСТИ СУММУ ";
				cout << "\n\nВведите сумму для вывода";
				cin >> amt;
				int bal = ac.retdeposit() - amt;
				if ((bal < 500 && ac.rettype() == 'S') || (bal < 1000 && ac.rettype() == 'C'))
					cout << "Недостаток баланса";
				else
					ac.draw(amt);
			}
			int pos = (-1) * static_cast<int>(sizeof(ac));
			File.seekp(pos, ios::cur);
			File.write(reinterpret_cast<char*> (&ac), sizeof(account));
			cout << "\n\n\t Запись обновлена";
			found = true;
		}
	}
	File.close();
	if (found == false)
		cout << "\n\n Запись не найдена ";
}
